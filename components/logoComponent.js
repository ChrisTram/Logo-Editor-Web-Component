const template = document.createElement("template");
template.innerHTML = `
<head>
	<style>
		* {
			font-size: 1.5em;
		}

		span {
			width: 4rem;
			display: inline-block;

		}

		button {
			width: 4rem;
			height: 4rem;
			border: none;
			border-radius: 10px;
			background-color: seagreen;
			color: white;
		}

		#logo {
			font-size: 100px;
			height: auto;
			width: auto;
			--sheenX: 0;
			/* Set these with JavaScript */
			--sheenY: 0;
			background-size: auto;
			background-color: black;
			box-shadow: 0 0 140px 10px rgba(0, 0, 0, .5);
      position: relative;
      margin:auto;
      display:table;
		}

		#logo::after {
			content: "";
			position: absolute;
			top: -400px;
			right: -400px;
			bottom: -400px;
			left: -400px;
			background: linear-gradient(217deg, rgba(255, 255, 255, 0), rgba(255, 255, 255, 0) 35%, rgba(255, 255, 255, 0.25) 45%, rgba(255, 255, 255, .25) 50%, rgba(255, 255, 255, 0) 60%, rgba(255, 255, 255, 0) 100%);
      transform: translateX(var(--sheenX)) translateY(var(--sheenY));
      pointer-events: none
		}

		.logoTexture {
			-webkit-background-clip: text;
			-webkit-text-fill-color: transparent;
			text-shadow: none !important;
		}


		.shadow-pop-tr {
			-webkit-animation: shadow-pop-tr 0.4s cubic-bezier(0.470, 0.000, 0.745, 0.715) both;
			animation: shadow-pop-tr 0.4s cubic-bezier(0.470, 0.000, 0.745, 0.715) both;
		}

		@-webkit-keyframes shadow-pop-tr {
			0% {
				-webkit-box-shadow: 0 0 #3e3e3e, 0 0 #3e3e3e, 0 0 #3e3e3e, 0 0 #3e3e3e, 0 0 #3e3e3e, 0 0 #3e3e3e, 0 0 #3e3e3e, 0 0 #3e3e3e;
				box-shadow: 0 0 #3e3e3e, 0 0 #3e3e3e, 0 0 #3e3e3e, 0 0 #3e3e3e, 0 0 #3e3e3e, 0 0 #3e3e3e, 0 0 #3e3e3e, 0 0 #3e3e3e;
				-webkit-transform: translateX(0) translateY(0);
				transform: translateX(0) translateY(0);
			}

			100% {
				-webkit-box-shadow: 1px -1px #3e3e3e, 2px -2px #3e3e3e, 3px -3px #3e3e3e, 4px -4px #3e3e3e, 5px -5px #3e3e3e, 6px -6px #3e3e3e, 7px -7px #3e3e3e, 8px -8px #3e3e3e;
				box-shadow: 1px -1px #3e3e3e, 2px -2px #3e3e3e, 3px -3px #3e3e3e, 4px -4px #3e3e3e, 5px -5px #3e3e3e, 6px -6px #3e3e3e, 7px -7px #3e3e3e, 8px -8px #3e3e3e;
				-webkit-transform: translateX(-8px) translateY(8px);
				transform: translateX(-8px) translateY(8px);
			}
		}

		@keyframes shadow-pop-tr {
			0% {
				-webkit-box-shadow: 0 0 #3e3e3e, 0 0 #3e3e3e, 0 0 #3e3e3e, 0 0 #3e3e3e, 0 0 #3e3e3e, 0 0 #3e3e3e, 0 0 #3e3e3e, 0 0 #3e3e3e;
				box-shadow: 0 0 #3e3e3e, 0 0 #3e3e3e, 0 0 #3e3e3e, 0 0 #3e3e3e, 0 0 #3e3e3e, 0 0 #3e3e3e, 0 0 #3e3e3e, 0 0 #3e3e3e;
				-webkit-transform: translateX(0) translateY(0);
				transform: translateX(0) translateY(0);
			}

			100% {
				-webkit-box-shadow: 1px -1px #3e3e3e, 2px -2px #3e3e3e, 3px -3px #3e3e3e, 4px -4px #3e3e3e, 5px -5px #3e3e3e, 6px -6px #3e3e3e, 7px -7px #3e3e3e, 8px -8px #3e3e3e;
				box-shadow: 1px -1px #3e3e3e, 2px -2px #3e3e3e, 3px -3px #3e3e3e, 4px -4px #3e3e3e, 5px -5px #3e3e3e, 6px -6px #3e3e3e, 7px -7px #3e3e3e, 8px -8px #3e3e3e;
				-webkit-transform: translateX(-8px) translateY(8px);
				transform: translateX(-8px) translateY(8px);
			}
		}

		/* ----------------------------------------------
   * Generated by Animista on 2020-12-27 14:51:37
   * Licensed under FreeBSD License.
   * See http://animista.net/license for more info. 
   * w: http://animista.net, t: @cssanimista
   * ---------------------------------------------- */

		/**
   * ----------------------------------------
   * animation rotate-diagonal-2
   * ----------------------------------------
   */

		.rotate-diagonal-2 {
			-webkit-animation: rotate-diagonal-2 6s linear infinite both;
			animation: rotate-diagonal-2 6s linear infinite both;
		}

		@-webkit-keyframes rotate-diagonal-2 {
			0% {
				-webkit-transform: rotate3d(-1, 1, 0, 0deg);
				transform: rotate3d(-1, 1, 0, 0deg);
			}

			50% {
				-webkit-transform: rotate3d(-1, 1, 0, 180deg);
				transform: rotate3d(-1, 1, 0, 180deg);
			}

			100% {
				-webkit-transform: rotate3d(-1, 1, 0, 360deg);
				transform: rotate3d(-1, 1, 0, 360deg);
			}
		}

		@keyframes rotate-diagonal-2 {
			0% {
				-webkit-transform: rotate3d(-1, 1, 0, 0deg);
				transform: rotate3d(-1, 1, 0, 0deg);
			}

			50% {
				-webkit-transform: rotate3d(-1, 1, 0, 180deg);
				transform: rotate3d(-1, 1, 0, 180deg);
			}

			100% {
				-webkit-transform: rotate3d(-1, 1, 0, 360deg);
				transform: rotate3d(-1, 1, 0, 360deg);
			}
		}



		/* ----------------------------------------------
   * Generated by Animista on 2020-12-27 14:49:27
   * Licensed under FreeBSD License.
   * See http://animista.net/license for more info. 
   * w: http://animista.net, t: @cssanimista
   * ---------------------------------------------- */

		/**
   * ----------------------------------------
   * animation rotate-center
   * ----------------------------------------
   */

		.rotate-center {
			-webkit-animation: rotate-center 10s ease-in-out infinite both;
			animation: rotate-center 10s ease-in-out infinite both;
		}

		@-webkit-keyframes rotate-center {
			0% {
				-webkit-transform: rotate(0);
				transform: rotate(0);
			}

			100% {
				-webkit-transform: rotate(360deg);
				transform: rotate(360deg);
			}
		}

		@keyframes rotate-center {
			0% {
				-webkit-transform: rotate(0);
				transform: rotate(0);
			}

			100% {
				-webkit-transform: rotate(360deg);
				transform: rotate(360deg);
			}
		}
	</style>
</head>
</br></br></br></br></br></br>

<span id="logo">Default</span>

</br></br></br></br></br></br></br>
<div>

<label>
	Texte : <input id="textInput" type="text">
</label>

</br>
<label>
	Taille : <input id="heightRanger" type="range" min="10" max="200" step="1">
</label>
<span id="height"></span>


</br>
<label>
	Opacité : <input id="opacityRanger" type="range" min="0" max="1" step="0.01">
</label>
<span id="opacity"></span>


</br>
<label for="textureSelect">Choix Texture :</label>
<select name="textureSelect" id="textureSelect">
  <option value="https://media.giphy.com/media/sIIhZliB2McAo/giphy.gif">Nyan Cat</option>
  <option value="https://media.giphy.com/media/Vzku9jyuef09G/giphy.gif">John Cena</option>
  <option value="https://media.giphy.com/media/gNke2UrUTopOg/giphy.gif">Noël</option>
  <option value="https://media.giphy.com/media/7Bgpw7PwdxoDC/giphy.gif">Snow</option>
  <option value="https://media.giphy.com/media/13mwsrXEUtSyZi/giphy.gif">Flames</option>
  <option value="https://christramier.fr/wp-content/JCVD.gif">Jean Claude Van Dame</option>

</select>


</br>
<label for="texturePosSelect">Utilisation Texture :</label>
<select name="texturePosSelect" id="texturePosSelect">
  <option value="onBackground">Fond</option>
	<option value="onText">Texte</option>
</select>

</br>
<label for="animationPicker">Animation :</label>
<select name="animationPicker" id="animationPicker">
  <option value="handMove">Mouse Over Animation</option>
	<option value="rotate-diagonal-2">Infinite Diagonal Rotation</option>
	<option value="shadow-pop-tr">Shadow Pop</option>
	<option value="rotate-center">Infinite Center Rotation</option>
</select>

</br>
<label for="fontPicker">Police :</label>
<select name="fontPicker" id="fontPicker">
  <option style="font-family: 'Brush Script MT', cursive" value="'Brush Script MT', cursive">Brush Script MT</option>
	<option style="font-family: 'Garamond', serif" value="'Garamond', serif">Garamond</option>
	<option style="font-family: 'Apple Chancery', cursive" value="'Apple Chancery', cursive">Apple Chancery</option>
	<option style="font-family: 'Impact', fantasy" value="'Impact', fantasy">Impact</option>
	<option style="font-family: 'Georgia', serif" value="'Georgia', serif">Georgia</option>
</select>

</br>
<label>
	Utiliser Couleur : <input id="colorPicker" type="color">
</label>
<span id="colorID"></span>


</br>
<label>
	Couleur Bordure : <input id="borderColorPicker" type="color">
</label>
<span id="borderColorID"></span>
</div>
<div id="shadowTextParameters">
<label>
	Couleur Ombrage Texte Primaire : <input id="shadowColorPicker" type="color">
</label>
<span id="shadowColorID"></span>

</br>
<label>
	Intensité Ombrage Texte Primaire : <input id="glowRanger" type="range" min="0" max="1" step="0.01">
</label>
<span id="glow"></span>

</br>
<label>
	Couleur Ombrage Texte Secondaire : <input id="shadowColorPicker2" type="color">
</label>
<span id="shadowColorID2"></span>

</br>
<label>
	Intensité Ombrage Texte Secondaire : <input id="glowRanger2" type="range" min="0" max="1" step="0.01">
</label>
<span id="glow2"></span>

</div>
<div id="boxParameters">
<label>
	Couleur Ombrage Box : <input id="shadowColorPicker3" type="color">
</label>
<span id="shadowColorID3"></span>

</br>
<label>
	Intensité Ombrage Box : <input id="glowRanger3" type="range" min="0" max="1" step="0.01">
</label>
<span id="glow3"></span>

</br>
<label>
  Opacité Ombrage Box : <input id="opacityBoxRanger" type="range" min="0" max="1" step="0.01">
</label>
<span id="opacityBox"></span>
</div>
`;
const getBaseURL = () => {
  return new URL('.', import.meta.url);
};


class logoEditor extends HTMLElement {

  currentAnimation = null;

  constructor() {
    super();
    this.attachShadow({ mode: "open" });

  }


  handleMouseMove(event) {
    console.log(event)
    const height = window.innerHeight;
    const width = window.innerWidth;
    // Creates angles of (-20, -20) (left, bottom) and (20, 20) (right, top)
    const yAxisDegree = event.pageX / width * 40 - 20;
    const xAxisDegree = event.pageY / height * -1 * 40 + 20;
    console.log(this.shadowRoot.querySelector('#logo'))
    this.shadowRoot.querySelector('#logo').style.transform = `rotateY(${yAxisDegree}deg) rotateX(${xAxisDegree}deg)`;
    // Set the sheen position
    this.setSheenPosition(event.pageX / width, event.pageY / width,);
  }
  setSheenPosition(xRatio, yRatio) {
    // This creates a "distance" up to 400px each direction to offset the sheen
    const xOffset = 1 - (xRatio - 0.5) * 800;
    const yOffset = 1 - (yRatio - 0.5) * 800;
    this.shadowRoot.querySelector('#logo').style.setProperty('--sheenX', `${xOffset}px`)
    this.shadowRoot.querySelector('#logo').style.setProperty('--sheenY', `${yOffset}px`)
  }
  updateShadowMap() {
    this.updateShadow(this.shadowRoot.getElementById("shadowColorPicker").value, this.shadowRoot.getElementById("shadowColorPicker2").value, this.shadowRoot.getElementById("shadowColorPicker3").value, this.shadowRoot.getElementById("borderColorPicker").value, this.shadowRoot.getElementById("glowRanger").value, this.shadowRoot.getElementById("glowRanger2").value, this.shadowRoot.getElementById("glowRanger3").value, this.shadowRoot.getElementById("opacityBoxRanger").value)
  }
  updateTextureMap() { 
    this.updateTexture(this.shadowRoot.getElementById("texturePosSelect").value, this.shadowRoot.getElementById("textureSelect").value);
  }


  connectedCallback() {
    this.couleur = this.getAttribute("couleur")
    this.shadowColor = this.getAttribute("shadowColor")
    this.shadowColor2 = this.getAttribute("shadowColor2")
    this.shadowColorBox = this.getAttribute("shadowColorBox")
    this.bordure = this.getAttribute("bordure")
    this.text = this.getAttribute("text")
    this.opacite = this.getAttribute("opacite")
    this.opaciteBox = this.getAttribute("opaciteBox")
    this.taille = this.getAttribute("taille")
    this.glow = this.getAttribute("glow")
    this.glow2 = this.getAttribute("glow2")
    this.glowBox = this.getAttribute("glowBox")
    this.positionTexture = this.getAttribute("positionTexture")
    this.texture = this.getAttribute("texture")


    this.shadowRoot.appendChild(template.content.cloneNode(true));

    this.shadowRoot.getElementById("opacityRanger").oninput = () => this.updateOpacity(this.shadowRoot.getElementById("opacityRanger").value);
    this.shadowRoot.getElementById("textInput").oninput = () => this.updateText(this.shadowRoot.getElementById("textInput").value);
    this.shadowRoot.getElementById("colorPicker").oninput = () => this.updateColor(this.shadowRoot.getElementById("colorPicker").value);
    this.shadowRoot.getElementById("opacityBoxRanger").oninput = () => this.updateShadowMap();
    this.shadowRoot.getElementById("borderColorPicker").oninput = () => this.updateShadowMap();
    this.shadowRoot.getElementById("shadowColorPicker").oninput = () => this.updateShadowMap();
    this.shadowRoot.getElementById("shadowColorPicker2").oninput = () => this.updateShadowMap();
    this.shadowRoot.getElementById("shadowColorPicker3").oninput = () => this.updateShadowMap();
    this.shadowRoot.getElementById("glowRanger").oninput = () => this.updateShadowMap();
    this.shadowRoot.getElementById("glowRanger2").oninput = () => this.updateShadowMap();
    this.shadowRoot.getElementById("glowRanger3").oninput = () => this.updateShadowMap();
    this.shadowRoot.getElementById("animationPicker").onchange = () => this.updateAnimation(this.shadowRoot.getElementById("animationPicker").value);
    this.shadowRoot.getElementById("fontPicker").onchange = () => this.updateFont(this.shadowRoot.getElementById("fontPicker").value);
    this.shadowRoot.getElementById("heightRanger").oninput = () => this.updateHeight(this.shadowRoot.getElementById("heightRanger").value);
    this.shadowRoot.getElementById("texturePosSelect").onchange = () => this.updateTextureMap()
    this.shadowRoot.getElementById("textureSelect").onchange = () => this.updateTextureMap()

    this.shadowRoot.getElementById('logo').onmousemove = (ev) => this.handleMouseMove(ev)

    this.updateColor(this.couleur)
    this.updateOpacity(this.opacite)

    this.updateTexture(this.positionTexture, this.texture);
    this.updateHeight(this.taille)
    this.updateShadow(this.shadowColor, this.shadowColor2, this.shadowColorBox, this.bordure, this.glow, this.glow2, this.glowBox, this.opaciteBox)
    this.updateText(this.text)
    this.fixRelativeURLs();
    
    this.myLogo = this.shadowRoot.querySelector('#logo')
    this.myLogo.setAttribute("webkit-mask-image", getBaseURL() + "assets/flamme.jpg")
    this.myLogo.textContent = this.text

    this.updateFont(this.getAttribute("font"))

    this.currentAnimation = this.getAttribute("animation")

    this.myLogo.classList.add(this.currentAnimation)

  }

  updateTexture(pos, texture) {
    
    if(pos == "onText") {
      this.shadowRoot.querySelector('#logo').classList.add('logoTexture')
      this.shadowRoot.getElementById("texturePosSelect").value = "onText"
      this.shadowRoot.getElementById("shadowTextParameters").style.display = "none"
    } else {
      console.log(pos, texture)
      this.shadowRoot.getElementById("texturePosSelect").value = "onBackground"
      this.shadowRoot.querySelector('#logo').classList.remove('logoTexture')
      this.shadowRoot.getElementById("shadowTextParameters").style.display = "block"
    }
    this.shadowRoot.querySelector('#logo').style['background-image'] =  "url(" + texture + ")"
  }
  fixRelativeURLs() {
    let images = this.shadowRoot.querySelectorAll('img');
    images.forEach((e) => {
      let imagePath = e.getAttribute('src');
      e.src = getBaseURL() + '/' + imagePath;
    });
  }

  updateHeight(height) {
    this.shadowRoot.getElementById("heightRanger").value = height
    this.shadowRoot.getElementById("height").innerHTML = height;
    this.shadowRoot.querySelector('span').style.fontSize = height + "px";
  }

  updateAnimation(name) {
    this.shadowRoot.querySelector('#logo').classList.remove(this.currentAnimation)
    this.currentAnimation = name

    if(name == "shadow-pop-tr") {
      this.shadowRoot.querySelector('#boxParameters').style.display = "none";
    } else {
      this.shadowRoot.querySelector('#boxParameters').style.display = "block";
    }
    this.shadowRoot.querySelector('#logo').classList.add(this.currentAnimation)
  }

  updateFont(name) {
    this.myLogo.style.fontFamily = name;
    this.shadowRoot.getElementById("fontPicker").value = name
  }

  updateOpacity(opacity) {
    this.shadowRoot.getElementById("opacityRanger").value = opacity
    this.shadowRoot.getElementById("opacity").innerHTML = opacity;
    this.shadowRoot.querySelector('#logo').style.opacity = opacity
  }

  updateColor(color) {
    this.shadowRoot.querySelector('#logo').classList.remove('logoTexture')
    this.updateTexture("onBackground", this.shadowRoot.getElementById("textureSelect").value) // Because if the texture is on the text, we wont see the color
    this.shadowRoot.getElementById("colorID").innerHTML = color;
    this.shadowRoot.getElementById("colorPicker").value = color
    this.shadowRoot.querySelector('#logo').style.color = color
  }
  hexToRgb(hex) {
    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
      r: parseInt(result[1], 16),
      g: parseInt(result[2], 16),
      b: parseInt(result[3], 16)
    } : null;
  }
  updateShadow(shadowColor, shadowColor2, shadowColor3, borderColor, glow, glow2, glow3, boxOpacity) {
    this.shadowRoot.getElementById("shadowColorID").innerHTML = shadowColor;
    this.shadowRoot.getElementById("shadowColorPicker").value = shadowColor;
    this.shadowRoot.getElementById("shadowColorID2").innerHTML = shadowColor2;
    this.shadowRoot.getElementById("shadowColorPicker2").value = shadowColor2;
    this.shadowRoot.getElementById("shadowColorID3").innerHTML = shadowColor3;
    this.shadowRoot.getElementById("shadowColorPicker3").value = shadowColor3;
    this.shadowRoot.getElementById("glowRanger").value = glow;
    this.shadowRoot.getElementById("glow").innerHTML = glow;
    this.shadowRoot.getElementById("glowRanger2").value = glow2;
    this.shadowRoot.getElementById("glow2").innerHTML = glow2;
    this.shadowRoot.getElementById("glowRanger3").value = glow3;
    this.shadowRoot.getElementById("glow3").innerHTML = glow3;
    this.shadowRoot.getElementById("opacityBoxRanger").value = boxOpacity;
    this.shadowRoot.getElementById("opacityBox").innerHTML = boxOpacity;

    this.shadowRoot.getElementById("borderColorID").innerHTML = borderColor;
    this.shadowRoot.getElementById("borderColorPicker").value = borderColor;
    this.shadowRoot.querySelector('#logo').style.textShadow = "1px 1px 2px" + borderColor +
      ", 0 0 " + glow + "em " + shadowColor +
      ", 0 0 " + glow2 + "em" + shadowColor2;

    let match = this.hexToRgb(shadowColor3)
    let boxShadowRgb = "rgba(" + [match.r,match.g,match.b,boxOpacity].join(',') +")";

    this.shadowRoot.querySelector('#logo').style.boxShadow = "0 0 "+ " " + glow3 +"em" + " " + boxShadowRgb;
  }

  updateText(newText) {
    if (this.shadowRoot.getElementById("textInput").value == "") {
      this.shadowRoot.getElementById("textInput").value = newText
    }
    this.shadowRoot.querySelector('#logo').textContent = newText;
  }
}

customElements.define("logo-editor", logoEditor);
